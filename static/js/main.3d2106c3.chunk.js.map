{"version":3,"sources":["App.js","components/number.js","components/answer.js","serviceWorker.js","index.js"],"names":["App","onClick","button","reset","backspace","calculation","setState","result","state","substr","length","eval","error","className","this","Component","number","name","e","props","target","id","answer","today","Date","date","getFullYear","getMonth","getDate","current_day","getDay","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d2106c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Number from './components/number';\r\nimport Answer from './components/answer';\r\n\r\n\r\nclass App extends Component {\r\n\r\nconstructor() {\r\n    super();\r\n    this.state = {\r\n        result: ''\r\n    }\r\n}\r\n\r\nonClick = button => {\r\n    if(button === \"AC\") {\r\n        this.reset();\r\n    }\r\n    else if(button === \"DEL\") {\r\n        this.backspace();\r\n    }\r\n    else if(button === \"=\") {\r\n        this.calculation();\r\n    }\r\n    else {\r\n        this.setState({\r\n            result: this.state.result + button\r\n        })\r\n    }\r\n}\r\n\r\nreset = () => {\r\n    this.setState({\r\n        result: ''\r\n    })\r\n}\r\n\r\nbackspace = () => {\r\n    this.setState({\r\n        result: this.state.result.substr(0, this.state.result.length - 1)\r\n    })\r\n}\r\n\r\ncalculation = () => {\r\n    try {\r\n        this.setState({\r\n            // eslint-disable-next-line\r\n            result: (eval(this.state.result) || '') + ''\r\n        })\r\n    } catch (error) {\r\n        this.setState({\r\n            result: 'Error'\r\n        })\r\n    }\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"calculator-body\">\r\n                    <hr/>\r\n                    <Answer result={this.state.result}/>\r\n                    <Number onClick={this.onClick}/>\r\n                    <hr/>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\n\r\nclass number extends Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n            <div className=\"button\"> \r\n                <button name=\"AC\" onClick={e => this.props.onClick(e.target.name)} id=\"sign\">AC</button>\r\n                <button name=\"(\" onClick={e => this.props.onClick(e.target.name)} id=\"sign\">(</button>\r\n                <button name=\")\" onClick={e => this.props.onClick(e.target.name)} id=\"sign\">)</button>\r\n                <button name=\"/\" onClick={e => this.props.onClick(e.target.name)} id=\"sign\">/</button><br/>\r\n\r\n                <button name=\"7\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">7</button>\r\n                <button name=\"8\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">8</button>\r\n                <button name=\"9\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">9</button>\r\n                <button name=\"*\" onClick={e => this.props.onClick(e.target.name)} id=\"sign\">*</button><br/>\r\n\r\n                <button name=\"4\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">4</button>\r\n                <button name=\"5\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">5</button>\r\n                <button name=\"6\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">6</button>\r\n                <button name=\"-\" onClick={e => this.props.onClick(e.target.name)} id=\"sign\">-</button><br/>\r\n\r\n                <button name=\"1\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">1</button>\r\n                <button name=\"2\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">2</button>\r\n                <button name=\"3\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">3</button>\r\n                <button name=\"+\" onClick={e => this.props.onClick(e.target.name)} id=\"sign\">+</button><br/>\r\n\r\n                <button name=\"0\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">0</button>\r\n                <button name=\".\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">.</button>\r\n                <button name=\"DEL\" onClick={e => this.props.onClick(e.target.name)} id=\"num\">DEL</button>\r\n                <button name=\"=\" onClick={e => this.props.onClick(e.target.name)} id=\"equal\">=</button>\r\n\r\n            </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default number;","import React, { Component } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nclass answer extends Component {\r\n    constructor() {\r\n        super();\r\n        let today = new Date(),\r\n            date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate(),\r\n\r\n            weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n            current_day = weekdays[today.getDay()];\r\n\r\n            this.state = {\r\n                date: date,\r\n                current_day: current_day\r\n            }\r\n    }\r\n    render() {\r\n         let {result} = this.props;\r\n        return (\r\n<Container>\r\n<div className=\"result\">\r\n<div className=\"demo\">\r\n<Row>\r\n<Col><p id=\"ans-date\">{this.state.date}</p></Col>\r\n<Col><h2>Calcu<span className=\"demo-span\">lator</span></h2></Col>\r\n<Col><p id=\"ans-date\">{this.state.current_day}</p></Col>\r\n</Row>\r\n</div>\r\n<p>{result}</p>\r\n</div>\r\n</Container>\r\n\r\n\r\n    );\r\n    }\r\n}\r\n\r\nexport default answer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}